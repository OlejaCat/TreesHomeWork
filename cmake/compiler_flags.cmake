function(read_flags_from_file file_path compile_output_var link_output_var)
    if(EXISTS ${file_path})
        file(READ ${file_path} flags)
        string(STRIP "${flags}" flags)
        string(REPLACE "\n" " " flags "${flags}")
        separate_arguments(flags_list UNIX_COMMAND "${flags}")

        set(compile_flags)
        set(link_flags)
        
        foreach(flag IN LISTS flags_list)
            if(flag MATCHES "^-fsanitize" OR flag MATCHES "^-pie" OR flag MATCHES "^-fPIE" OR flag MATCHES "^-fstack-protector")
                list(APPEND link_flags "${flag}")
            endif()
            list(APPEND compile_flags "${flag}")
        endforeach()
        
        set(${compile_output_var} "${compile_flags}" PARENT_SCOPE)
        set(${link_output_var} "${link_flags}" PARENT_SCOPE)
    else()
        message(WARNING "Flags file not found: ${file_path}")
    endif()
endfunction()

if(ENABLE_DEBUG)
    if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
        read_flags_from_file(${CMAKE_CURRENT_LIST_DIR}/clang_debug.flags COMPILER_FLAGS LINKER_FLAGS)
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        read_flags_from_file(${CMAKE_CURRENT_LIST_DIR}/gcc_debug.flags COMPILER_FLAGS LINKER_FLAGS)
    endif()
else()
    if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
        read_flags_from_file(${CMAKE_CURRENT_LIST_DIR}/clang_release.flags COMPILER_FLAGS LINKER_FLAGS)
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        read_flags_from_file(${CMAKE_CURRENT_LIST_DIR}/gcc_release.flags COMPILER_FLAGS LINKER_FLAGS)
    endif()
endif()

add_library(project_compiler_flags INTERFACE)
target_compile_features(project_compiler_flags INTERFACE cxx_std_20)

if(COMPILER_FLAGS)
    target_compile_options(project_compiler_flags INTERFACE ${COMPILER_FLAGS})
endif()

if(LINKER_FLAGS)
    target_link_options(project_compiler_flags INTERFACE ${LINKER_FLAGS})
endif()
